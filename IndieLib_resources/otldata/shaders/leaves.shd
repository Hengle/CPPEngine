[Vertex shader]
struct app2vertex {
	float4 Position : POSITION;
	float3 Normal : NORMAL;
	float2 TexCoord : TEXCOORD0;
	float3 Tangent : TEXCOORD1;
	float3 BiNormal : TEXCOORD2;
};

struct vertex2fragment { 
	float4 Position : POSITION;
	float2 TexCoord : TEXCOORD0;
	float3 oLightDir : TEXCOORD1;
	float3 oEyeVec : TEXCOORD2;
	float4 Color : COLOR0;
};

ROW_MAJOR float4x4 ModelViewI;
ROW_MAJOR float4x4 ModelViewIT;
ROW_MAJOR float4x4 ModelViewProj;
float4 lightcolor;
float4 LightPos;

vertex2fragment main (app2vertex IN)
{
	vertex2fragment OUT; 
	
	OUT.Position = mul (ModelViewProj, IN.Position);
	OUT.TexCoord = IN.TexCoord;
	
	float3 L = normalize(LightPos.xyz - IN.Position.xyz);
	
	OUT.oLightDir = max(dot(IN.Normal, L), 0);
	
	return OUT;
}
[Fragment shader]
struct vertex2fragment { 
	float4 Position : POSITION;
	float2 TexCoord : TEXCOORD0;
	float3 lightdist : TEXCOORD1;
	float3 EyeVec : TEXCOORD2;
	float4 Color : COLOR0;
};

float4 lightcolor;
//sampler2D TexDiffuse : TEXUNIT0;
//sampler2D TexNormal : TEXUNIT1;
//sampler2D TexHeight : TEXUNIT2;

float4 main (vertex2fragment IN) : COLOR
{
	//finalcolor = tex2D (TexDiffuse, IN.TexCoord);
	float4 finalcolor = float4(0.33,0.41,0.18,1.0) * ( float4(IN.lightdist,1.0) + 0.4);
	
	return finalcolor;
}

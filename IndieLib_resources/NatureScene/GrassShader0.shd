[Vertex shader]
ROW_MAJOR float4x4 worldViewProj MVPSEMANTIC;

struct GrassVS_INPUT
{
    float3 position	: POSITION;
    float3 normal	: NORMAL;
    float3 texcoord0 : TEXCOORD0;
    float3 texcoord1 : TEXCOORD1;
    float3 texcoord2 : TEXCOORD2;
    float3 texcoord3 : TEXCOORD3;
};
struct GrassVS_OUTPUT
{
    float4 position : POSITION;
    float3 texcoord  : TEXCOORD0;

};
float elapsedTime;

GrassVS_OUTPUT main(GrassVS_INPUT IN)
{
	GrassVS_OUTPUT OUT;
	float4 oldVertex = float4(IN.position,1);;

	float4x4 newMatrix = float4x4(float4(IN.texcoord2.xyz, 0.0),
		      float4(IN.normal, 0.0),
		      float4(IN.texcoord1.xyz, 0.0),
		      0.0, 0.0, 0.0, 1.0);

	if(IN.texcoord0.y > 0.2)
	{
		float cosine	 = cos(elapsedTime)*IN.texcoord0.z*10.0;
		oldVertex.x	+= cosine;
		oldVertex.z	+= cosine;
	}

	float4 finalVertex	= mul(oldVertex,newMatrix  );
	finalVertex.xyz += IN.texcoord3.xyz;

	OUT.texcoord = IN.texcoord0;
	OUT.position = mul( finalVertex,worldViewProj);


	return OUT;
}
[Fragment shader]
struct GrassPS_OUTPUT
{
	float4 color : COLOR;
};

struct GrassVS_OUTPUT
{
    float4 position : POSITION;
    float3 texcoord  : TEXCOORD0;

};
float	alphaBooster;

//grassPack.load2D("Data/Grass/grassPack.dds", D3DTADDRESS_WRAP, D3DTADDRESS_CLAMP, D3DTEXF_LINEAR, D3DTEXF_LINEAR, true);
texture2D grassTexture; // This texture will be loaded by the application
sampler2D grass = sampler_state
{
    Texture   = (grassTexture);
   ADDRESSU = WRAP;
   ADDRESSV = CLAMP;
   ADDRESSW = WRAP;
   MAGFILTER = LINEAR;
   MINFILTER = LINEAR;
   MIPFILTER = NONE;//LINEAR;
};

GrassPS_OUTPUT main(GrassVS_OUTPUT IN)
{
	GrassPS_OUTPUT OUT;
#if 1
	IN.texcoord.y=-(IN.texcoord.y-1);
	float4	grassSample = tex2D(grass, IN.texcoord.xy);
	float newAlpha	  = grassSample.a*alphaBooster;
	OUT.color	  = float4(grassSample.xyz, newAlpha);

	// Gamma from 9.99 to 0.1
	float gamma=1.5;
	OUT.color.r=pow(abs(OUT.color.r), 1.0 / gamma);
	OUT.color.g=pow(abs(OUT.color.g), 1.0 / gamma);
	OUT.color.b=pow(abs(OUT.color.b), 1.0 / gamma);

#else
	OUT.color=float4(0,1,0,1);
#endif
	return OUT;
}


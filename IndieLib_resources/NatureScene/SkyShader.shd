[Vertex shader]
ROW_MAJOR float4x4 worldViewProj MVPSEMANTIC;

struct SkyVS_INPUT
{
    float3 position	: POSITION;
};
struct SkyVS_OUTPUT
{
    float4 position : POSITION;
    float4 TexCoord  : TEXCOORD0;

    ////float2 intensitySqrdintensity : TEXCOORD1;
    //float positionyparamsy : TEXCOORD1;

      float	intensitySqrd : TEXCOORD1;
      float		     intensity : TEXCOORD2;
};

      float4  params;
      float3  offset;

SkyVS_OUTPUT main(SkyVS_INPUT IN)
{
	SkyVS_OUTPUT OUT;

	float2 newUV  = float2((IN.position.x - offset.x)/params.x,
			   (IN.position.z - offset.z)/params.z);

	OUT.TexCoord.x	= newUV.x + params.w*0.66;
	OUT.TexCoord.y	= newUV.y + params.w*0.33;
	OUT.TexCoord.xy *= 2.0;

	OUT.TexCoord.z = newUV.x + params.w*1.33;
	OUT.TexCoord.w = newUV.y + params.w*1.66;
	OUT.TexCoord.zw *= 3.0;

	//Get the vertex height and scale it to 0 - 1 range
	OUT.intensity	     = IN.position.y/params.y;
	OUT.intensity	     = exp(clamp(OUT.intensity, 0.0, 1.0))/2.8;
	OUT.intensitySqrd    = OUT.intensity*OUT.intensity;

	OUT.position = mul(worldViewProj, float4(IN.position,1));
	//OUT.position = float4(IN.position,1);
	return OUT;
      }
[Fragment shader]
struct SkyVS_OUTPUT
{
    float4 position : POSITION;
    float4 TexCoord  : TEXCOORD0;

    ////float2 intensitySqrdintensity : TEXCOORD1;
    //float positionyparamsy : TEXCOORD1;

      float	intensitySqrd : TEXCOORD1;
      float		     intensity : TEXCOORD2;


};

struct SkyPS_OUTPUT
{
	float4 color : COLOR;
};
#if 1
sampler2D noise;
float4	  skyInfo;

SkyPS_OUTPUT main(SkyVS_OUTPUT IN)
{
	SkyPS_OUTPUT OUT;
	float4 noise1	  = tex2D(noise, IN.TexCoord.xy),
	     noise2	= tex2D(noise, IN.TexCoord.zw);

	float4 cloudFrag  = (noise1 + noise2) *  IN.intensitySqrd,
	     cloudColor = float4((1.0 - IN.intensity)*skyInfo.x,
			       (1.0 - IN.intensity)*skyInfo.y,
			       IN.intensity*skyInfo.z, 0.0);

	OUT.color    = cloudColor * (1.0 - cloudFrag.x) + cloudFrag;

	// Gamma from 9.99 to 0.1
	//float gamma=1.5;
	//OUT.color.r=pow(abs(OUT.color.r), 1.0 / gamma);
	//OUT.color.g=pow(abs(OUT.color.g), 1.0 / gamma);
	//OUT.color.b=pow(abs(OUT.color.b), 1.0 / gamma);
	OUT.color.a=1.0;
	return OUT;
}
#else
SkyPS_OUTPUT main(SkyVS_OUTPUT IN)
{
	SkyPS_OUTPUT OUT;
	OUT.color      = float4(0.0, 0.0, 1.0, 1.0);

	// Gamma from 9.99 to 0.1
	float gamma=1.5;
	OUT.color.r=pow(abs(OUT.color.r), 1.0 / gamma);
	OUT.color.g=pow(abs(OUT.color.g), 1.0 / gamma);
	OUT.color.b=pow(abs(OUT.color.b), 1.0 / gamma);
	return OUT;
}
#endif



[Vertex shader]
ROW_MAJOR float4x4 worldViewProj MVPSEMANTIC;

struct GrassVS_INPUT
{
    float3 position	: POSITION;
    float3 normal	: NORMAL;
    float3 MultiTexCoord3 : TEXCOORD0;
    float3 MultiTexCoord2 : TEXCOORD1;
    float3 MultiTexCoord1 : TEXCOORD2;
    float3 MultiTexCoord0 : TEXCOORD3;
};
struct GrassVS_OUTPUT
{
    float4 position : POSITION;
    float3 TexCoord  : TEXCOORD0;

};

      float elapsedTime;
 
GrassVS_OUTPUT main(GrassVS_INPUT IN)
{
	GrassVS_OUTPUT OUT;
	float4 oldVertex = float4(IN.position,1);

	float4x4 newMatrix = float4x4(float4(IN.MultiTexCoord2.xyz, 0.0),
			      float4(IN.normal, 0.0),
			      float4(IN.MultiTexCoord1.xyz, 0.0),
			      0.0, 0.0, 0.0, 1.0);

	if(IN.MultiTexCoord0.y > 0.2)
	{
	  float cosine	 = cos(elapsedTime)*IN.MultiTexCoord0.z*10.0;
	  oldVertex.x	+= cosine;
	  oldVertex.z	+= cosine;
	}

	float4 finalVertex	= mul(newMatrix,oldVertex);
	     finalVertex.xyz += IN.MultiTexCoord3.xyz;

	OUT.TexCoord = IN.MultiTexCoord0;
	OUT.position = mul( worldViewProj,finalVertex);
        //OUT.position = finalVertex;
        return OUT;
      }

[Fragment shader]
struct GrassVS_OUTPUT
{
    float4 position : POSITION;
    float3 TexCoord  : TEXCOORD0;

};
struct GrassPS_OUTPUT
{
	float4 color : COLOR;
};
#if 1
sampler2D grass;
float alphaBooster=1.0;

GrassPS_OUTPUT main(GrassVS_OUTPUT IN)
{
	GrassPS_OUTPUT OUT;
	float2 uv=IN.TexCoord.xy;
	uv.y=1.0-uv.y;
	float4	grassSample = tex2D(grass, uv);
	float newAlpha	  = grassSample.a*alphaBooster;
	OUT.color      = float4(grassSample.xyz, newAlpha);

	// Gamma from 9.99 to 0.1
	float gamma=1.5;
	OUT.color.r=pow(abs(OUT.color.r), 1.0 / gamma);
	OUT.color.g=pow(abs(OUT.color.g), 1.0 / gamma);
	OUT.color.b=pow(abs(OUT.color.b), 1.0 / gamma);
	OUT.color.a=1.0;
	return OUT;
}
#else
GrassPS_OUTPUT main(GrassVS_OUTPUT IN)
{
	GrassPS_OUTPUT OUT;
	OUT.color      = float4(0.0, 1.0, 0.0, 1.0);

	// Gamma from 9.99 to 0.1
	float gamma=1.5;
	OUT.color.r=pow(abs(OUT.color.r), 1.0 / gamma);
	OUT.color.g=pow(abs(OUT.color.g), 1.0 / gamma);
	OUT.color.b=pow(abs(OUT.color.b), 1.0 / gamma);
	return OUT;
}
#endif


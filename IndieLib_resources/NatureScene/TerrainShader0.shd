[Vertex shader]
ROW_MAJOR float4x4 worldViewProj MVPSEMANTIC;

struct TerrainVS_INPUT
{
    float3 position	: POSITION;
    float3 normal	: NORMAL;
    float2 texcoord0 : TEXCOORD;
};
struct TerrainVS_OUTPUT
{
    float4 position : POSITION;
    float2 texcoord0  : TEXCOORD0;
    float4 texcoord1  : TEXCOORD1;

};

TerrainVS_OUTPUT main(TerrainVS_INPUT IN)
{
	TerrainVS_OUTPUT OUT;
	OUT.texcoord0 = IN.texcoord0;
	OUT.texcoord1 = float4(IN.normal, 0.0);
	OUT.position = mul( float4(IN.position, 1),worldViewProj);

	return OUT;
}
[Fragment shader]
struct TerrainPS_OUTPUT
{
	float4 color : COLOR0;
};

struct TerrainVS_OUTPUT
{
    float4 position : POSITION;
    float2 texcoord0  : TEXCOORD0;
    float4 texcoord1  : TEXCOORD1;

};

/*
dirt.load2D("Data/Terrain/dirt.dds", D3DTADDRESS_WRAP, D3DTADDRESS_WRAP, D3DTEXF_LINEAR, D3DTEXF_LINEAR, true);
fungus.load2D("Data/Terrain/fungus.dds", D3DTADDRESS_WRAP, D3DTADDRESS_WRAP, D3DTEXF_LINEAR, D3DTEXF_LINEAR, true);
grass.load2D("Data/Terrain/grasslayer.dds", D3DTADDRESS_WRAP, D3DTADDRESS_WRAP, D3DTEXF_LINEAR, D3DTEXF_LINEAR, true);
weight.load2DImage(watermap, D3DTADDRESS_CLAMP, D3DTADDRESS_CLAMP, D3DTEXF_LINEAR, D3DTEXF_LINEAR, true);
*/
texture2D grassTexture; // This texture will be loaded by the application
sampler2D grass = sampler_state
{
    Texture   = (grassTexture);
   ADDRESSU = WRAP;
   ADDRESSV = WRAP;
   MAGFILTER = LINEAR;
   MINFILTER = LINEAR;
   MIPFILTER = LINEAR;
};
texture2D weightTexture; // This texture will be loaded by the application
sampler2D weight = sampler_state
{
    Texture   = (weightTexture);
   ADDRESSU = CLAMP;
   ADDRESSV = CLAMP;
   MAGFILTER = LINEAR;
   MINFILTER = LINEAR;
   MIPFILTER = LINEAR;
};
texture2D fungusTexture; // This texture will be loaded by the application
sampler2D fungus = sampler_state
{
    Texture   = (fungusTexture);
   ADDRESSU = WRAP;
   ADDRESSV = WRAP;
   MAGFILTER = LINEAR;
   MINFILTER = LINEAR;
   MIPFILTER = LINEAR;
};
texture2D dirtTexture; // This texture will be loaded by the application
sampler2D dirt = sampler_state
{
    Texture   = (dirtTexture);
   ADDRESSU = WRAP;
   ADDRESSV = WRAP;
   MAGFILTER = LINEAR;
   MINFILTER = LINEAR;
   MIPFILTER = LINEAR;
};


TerrainPS_OUTPUT main(TerrainVS_OUTPUT IN)
{
	TerrainPS_OUTPUT OUT;
#if 1
	float4	weightSample  = tex2D(weight, IN.texcoord0.xy),
	      fungusSample  = tex2D(fungus, IN.texcoord0.xy*25.0),
	      grassSample   = tex2D(grass , IN.texcoord0.xy*20.0),
	      dirtSample    = tex2D(dirt  , IN.texcoord0.xy*20.0);

	float weightScale1  = clamp(weightSample.y * 1.25, 0.0, 1.0),
	      weightScale2  = clamp(weightSample.x, 0.0, 1.0);

	float3	normal	     = normalize(IN.texcoord1.xyz);
	float dotProduct   = clamp(dot(float3(0.73, 0.73, 0.0), normal), 0.0, 1.0);

	float4	dirtAndGrass = dirtSample   * weightScale1 + (1.0 - weightScale1) * grassSample;
	float4	color	     = weightScale2 * dirtAndGrass + (1.0 - weightScale2) * fungusSample;
	OUT.color	= color * dotProduct;

	// Gamma from 9.99 to 0.1
	float gamma=1.5;
	OUT.color.r=pow(abs(OUT.color.r), 1.0 / gamma);
	OUT.color.g=pow(abs(OUT.color.g), 1.0 / gamma);
	OUT.color.b=pow(abs(OUT.color.b), 1.0 / gamma);

#else
	OUT.color=float4(1,0,0,1);
#endif
	return OUT;
}
